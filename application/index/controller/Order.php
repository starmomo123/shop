<?php

namespace app\index\controller;

use think\Controller;
use think\Request;

class Order extends Controller
{
    private $user;
    private $deal;
    private $category;
    private $bis;
    private $bisLocation;
    private $bisAccount;
    private $order;
    protected function initialize()
    {
        $this->user = model('user');
        $this->deal = model('deal');
        $this->category = model('category');
        $this->bis = model('bis');
        $this->order = model('order');
        $this->bisLocation = model('BisLocation');
        $this->bisAccount = model('bis_account');
        parent::initialize(); // TODO: Change the autogenerated stub
    }
    /**
     * 显示资源列表
     *
     * @return \think\Response
     */
    public function index(Request $request)
    {
        //
        $uid = session('uid');
        $user = $this->user->get($uid);
        if (empty($user)) {
            $this->error('请先登录', url('index/login/login'));
        }
        $deal_id = input('get.id');
        $count = input('get.count');
        $totalPrice = input('get.totalPrice');
        $deal = $this->deal->get($deal_id);
        if (empty($deal) && $deal['status'] < 0) {
            $this->error('商品不存在～～');
        }
        $referer = $request->server()['HTTP_REFERER'];
        if ($referer == '') {
            $this->error('订单来源有误～～');
        }

        //不做数据的校验

        $order = array();
        $order['out_trade_no'] = $this->getOrderNo();
        $order['deal_id'] = $deal['id'];
        $order['deal_count'] = $count;
        $order['total_price'] = $totalPrice;
        $order['user_id'] = $user['id'];
        $order['username'] = $user['username'];
        //支付方式 1 微信支付 2 支付宝支付
        $order['payment_id'] = 1;
        //支付状态 0 未支付 1支付成功 2支付失败
        $order['pay_status'] = 0;
        //订单状态
        $order['status'] = 0;
        //订单来源
        $order['referer'] = $referer;

        try{
            $orderId = $this->order->add($order);
        }catch (\Exception $e) {
            echo $e->getMessage();
            $this->error('创建订单失败～～');
        }


        //跳到支付页
        $this->redirect(url('pay/index', ['id' => $orderId]));
    }

    protected function getOrderNo() {
        list($t1, $t2) = explode(' ', microtime());
        $t3 = explode('.', $t1*1000);
        return $t2.$t3[0].rand(10000, 99999);
    }

    /**
     * 显示创建资源表单页.
     *
     * @return \think\Response
     */
    public function create()
    {
        //
    }

    /**
     * 保存新建的资源
     *
     * @param  \think\Request  $request
     * @return \think\Response
     */
    public function save(Request $request)
    {
        //
    }

    /**
     * 显示指定的资源
     *
     * @param  int  $id
     * @return \think\Response
     */
    public function read($id)
    {
        //
    }

    /**
     * 显示编辑资源表单页.
     *
     * @param  int  $id
     * @return \think\Response
     */
    public function edit($id)
    {
        //
    }

    /**
     * 保存更新的资源
     *
     * @param  \think\Request  $request
     * @param  int  $id
     * @return \think\Response
     */
    public function update(Request $request, $id)
    {
        //
    }

    /**
     * 删除指定资源
     *
     * @param  int  $id
     * @return \think\Response
     */
    public function delete($id)
    {
        //
    }
}
